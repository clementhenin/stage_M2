import pandas as pd
from scipy.stats import chisquare
from scipy.stats import t
from scipy.stats import ttest_ind
import random
import time
import pdb
import numpy as np


data = pd.read_csv('donnees_le_bras.csv')

taux_chom_i = data.query('immi == 1')['chom'].mean()
taux_chom_n = data.query('immi == 2')['chom'].mean()

tt = data.groupby(['age', 'educ', 'csp', 'immi', 'sexe', 'urbain', 'menage', 'region']).agg(['mean', 'size'])
tt.columns = ['mean' ,'size']
tt.reset_index(inplace=True)

tt['nchom_1'] = (tt['mean'] * tt['size']).apply(round)
tt['nchom_0'] = ((1 - tt['mean']) * tt['size']).apply(round)

del tt['mean'], tt['size']

tt_nati = tt.query('immi == 2')
tt_immi = tt.query('immi == 1')

del tt_nati['immi'], tt_immi['immi']

res = pd.merge(tt_nati, tt_immi,
               on=['age', 'educ', 'csp', 'sexe', 'urbain', 'menage', 'region'],
               how='outer',
               suffixes=['_n', '_i']
               )

res['taux_i'] = res['nchom_1_i'] / (res['nchom_1_i'] + res['nchom_0_i'])
res['taux_n'] = res['nchom_1_n'] / (res['nchom_1_n'] + res['nchom_0_n'])
res['delta'] = res['taux_n'] - res['taux_i']


res = res.dropna()


def random_delta(n_h, n_f):
    t_h = np.mean(np.random.binomial(1, taux_chom_n, int(n_h)))
    t_f = np.mean(np.random.binomial(1, taux_chom_i, int(n_f)))
    return t_h - t_f


def p_value(delta, n_0, n_1, nbr_simu=10000):
	simu = np.array([random_delta(n_0, n_1) for i in range(nbr_simu)])
	prob = np.mean(simu < delta)
	return min(prob, 1 - prob)


t1 = time.time()
res['p_value'] = np.nan
for x in res.iterrows():
	res.loc[x[0], 'p_value'] = p_value(x[1]['delta'], 
									   x[1]['nchom_1_n'] + x[1]['nchom_0_n'],
									   x[1]['nchom_1_i'] + x[1]['nchom_0_i'])
	print x[0]
	
t2 = time.time()
print t2 - t1

res.to_csv("results_immi.csv", index=False)


# freq = tt.groupby('sexe').agg(['mean', 'size'])
#
# def p_value(x, expected=freq):
#     exp_array = np.array(expected) * x['size']
#     return chisquare(
#         [x['mean'] * x['size'], (1 - x['mean']) * x['size']], exp_array)[1]


# freq = tt[['chom', 'sexe']].groupby('sexe').agg(['mean', 'size'])
# res['h_p_value'] = res.apply(labmda x:
#                                 chisquare([x['nchom_0_h'], x['nchom_1_h']],
#                                           ))


def p_value(nbr_0, nbr_1, expected):
    return chisquare([nbr_0, nbr_1], expected)


def welch_test_2_cat(freq):
    g1_out0 = float(freq[0][0])
    g1_out1 = float(freq[0][1])
    g2_out0 = float(freq[1][0])
    g2_out1 = float(freq[1][1])
    size_1 = (g1_out0 + g1_out1)
    size_2 = (g2_out0 + g2_out1)
    mean_1 = g1_out1 / size_1
    mean_2 = g2_out1 / size_2
    var_1 = mean_1 * (1 - mean_1)
    var_2 = mean_2 * (1 - mean_2)
    t_value = (mean_1 - mean_2) / np.sqrt(var_1 / size_1 + var_2 / size_2)
    free_dg = (var_1 / size_1 + var_2 / size_2)**2
    free_dg /= var_1**2 / (size_1**2 * (size_1 - 1)) + var_2**2 / (size_2**2 * (size_2 - 1))
    print free_dg
    p_value = t.sf(np.abs(t_value), free_dg)
    return t_value, p_value


